openapi: 3.0.0
info:
  title: Federated Tables API
  description: >
    # Introduction

    A Federated Table is a PostgreSQL Foreign Data Wrapper to a remote server,
    allowing us to perform live queries to a remote database. Think of it as a
    virtual table that looks like a regular sync table in CARTO â€” but when used,
    makes the queries you perform in CARTO travel to the remote database and get
    executed there.

    Typically, the use cases for Federated Tables include having frequently changing
    data that you join with other tables in CARTO. Having a large amount of data that
    is dificult to sync with CARTO but that you only need to query distinct parts of,
    like in the case of time-series databases. Even when you want to leverage the
    scalability or low latency of your cloud database from within the CARTO ecosystem.

    The API allows you to register remote databases, then you can browse remote schemas and tables
    to register those you want to use with CARTO.

    # Authorization

    In order to access Federated Tables API you must provide an API key. The CARTO
    Authorization guide explains how these keys are sent (TLDR: _HTTP basic
    auth_ or _query string param_ with the API key token). Depending on the
    permissions granted to the provided API key, the request will be authorized
    or not.

  version: 0.0.1
  contact:
    name: Have you found an error? Github issues
    url: 'https://github.com/CartoDB/Windshaft-cartodb/issues'
servers:
  - url: 'https://{user}.{domain}/api'
    description: Production server (uses live data)
    variables:
      domain:
        default: carto.com
        description: 'If on premises, change it to your domain'
      user:
        default: username
        description: Your username
      api_key:
        default: wadus
        description: Your api key token
paths:
  '/v4/federated_servers':
    post:
      summary: Register a Federated Server
      description: |
        The Federated Server handles the information about the remote database,
        that is its address and authentication values so CARTO can gain access to it.
      parameters:
        - in: query
          name: api_key
          required: true
          schema:
            type: string
          description: The authorization key token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FederatedServerRequest'
            example:
              federated_server_name: example_server
              mode: read-only
              dbname: geometries
              host: example.com
              port: "5432"
              username: read_only_user
              password: secret
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FederatedServerResponse'
              example:
                federated_server_name: example_server
                mode: read-only
                dbname: geometries
                host: example.com
                port: "5432"
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
      x-code-samples:
        - lang: Curl
          source: |
            curl -X POST -H "Content-Type: application/json" "https://{user}.carto.com/api/v4/federated_servers?api_key={api_key}" -d ''{
                "federated_server_name": "example_server",
                "mode": "read-only",
                "dbname": "geometries",
                "host": "example.com",
                "port": "5432",
                "username": "remote_user",
                "password": "remote_password"
            }''
    get:
      summary: List all existing Federated Servers
      description: |
        This endpoint allows you to access the information of all registered servers accesible by the caller.
      parameters:
        - in: query
          name: api_key
          required: true
          schema:
            type: string
          description: The authorization key token
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListOfFederatedServerResponse'
              example:
                - federated_server_name: example_server
                  mode: read-only
                  dbname: geometries
                  host: example.com
                  port: "5432"
                - federated_server_name: another_example_server
                  mode: read-only
                  dbname: countries
                  host: example.com
                  port: "5432"
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
      x-code-samples:
        - lang: Curl
          source: |
            curl -X GET "https://{user}.carto.com/api/v4/federated_servers?api_key={api_key}"
  '/v4/federated_servers/{federated_server_name}':
    get:
      summary: Get a Federated Server
      description: |
        This endpoint returns the configuration of a single server that matches the federated server name.
      parameters:
        - in: path
          name: federated_server_name
          required: true
          schema:
            type: string
          description: The name of the federated server
        - in: query
          name: api_key
          required: true
          schema:
            type: string
          description: The authorization key token
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FederatedServerResponse'
              example:
                federated_server_name: example_server
                mode: read-only
                dbname: geometries
                host: example.com
                port: "5432"
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
      x-code-samples:
        - lang: Curl
          source: |
            curl -X GET "https://{user}.carto.com/api/v4/federated_servers/{federated_server_name}?api_key={api_key}"
    put:
      summary: Update a Federated Server
      description: |
        This endpoint allows the modification of an already registered server. If the server didn't already exist it will create it.
      parameters:
        - in: path
          name: federated_server_name
          required: true
          schema:
            type: string
          description: The name of the federated server
        - in: query
          name: api_key
          required: true
          schema:
            type: string
          description: The authorization key token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FederatedServerRequest'
            example:
              mode: read-only
              dbname: geometries
              host: example.com
              port: "5432"
              username: read_only_user
              password: secret
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FederatedServerResponse'
              example:
                federated_server_name: example_server
                mode: read-only
                dbname: geometries
                host: example.com
                port: "5432"
        '204':
          description: Updated
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
      x-code-samples:
        - lang: Curl
          source: |
            curl -X PUT -H "Content-Type: application/json" "https://{user}.carto.com/api/v4/federated_servers/example_server?api_key={api_key}" -d ''{
                "mode": "read-only",
                "dbname": "geometries",
                "host": "example.com",
                "port": "5432",
                "username": "new_user",
                "password": "new_password"
            }''
    delete:
      summary: Unregister a Federated Server
      description: |
        This endpoint will remove a registered server and all the registered tables created through it.
      parameters:
        - in: path
          name: federated_server_name
          required: true
          schema:
            type: string
          description: The name of the federated server
        - in: query
          name: api_key
          required: true
          schema:
            type: string
          description: The authorization key token
      responses:
        '204':
          description: Unregistered
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
components:
  schemas:
    FederatedServerRequest:
      type: object
      properties:
        federated_server_name:
          type: string
          title: federated server name
          description: Alias for the federated server. It must be unique per user/organization and lower-case (required).
        mode:
          type: string
          enum:
            - read-only
          title: mode
          description: only read-only available
        dbname:
          type: string
          title: federated server database name
          description: database name
        host:
          type: string
          title: Host's URL
          description: Domain name of the federated server.
        port:
          type: string
          title: port
          description: available port number
        username:
          type: string
          title: username
          description: database role with login privileges
        password:
          type: string
          title: password
          description: the roleâ€™s secret password
    FederatedServerResponse:
      type: object
      properties:
        federated_server_name:
          type: string
          title: federated server name
          description: Alias for the federated server. It must be unique per user/organization and lower-case (required).
        mode:
          type: string
          enum:
            - read-only
          title: mode
          description: only read-only available
        dbname:
          type: string
          title: federated server database name
          description: database name
        host:
          type: string
          title: Host's URL
          description: Domain name of the federated server.
        port:
          type: string
          title: port
          description: available port number
    ListOfFederatedServerResponse:
      type: array
      items:
        $ref: '#/components/schemas/FederatedServerResponse'
  responses:
    NotFound:
      description: The specified resource was not found
    Unauthorized:
      description: Unauthorized. No authentication provided.
    Forbidden:
      description: Forbidden. The API key does not authorize this request.
    UnprocessableEntity:
      description: Request's parameters error
